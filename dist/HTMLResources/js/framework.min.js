(function($) {
    'use strict';
    $ = $ || jQuery;
  
    $(function() {
        //Put your code here
        /*var body = $('body'),
            html = $('html'),
            $doc = $(document);*/

            /*handlexxxxxxxxxx = function () {
              
            };*/


        //$navCloseDropdown.on('click', handlexxxxxxxxxx);

        // Only run this stuff if page is fully loaded
        // This is needed to prevent onreadystatechange being run twice
        var ready = false;

        document.onreadystatechange = function() {

          if (ready) {
            return;
          }
          
          //Put your code here

        };
    });
})(jQuery);
(function() {

	'use strict';

	angular
		.module('quizFramework', ['ngSanitize']);

})();
(function() {

	'use strict';
	
	function ListController(quizMetrics, dataService) {
		// VM = Virtual model
		var vm = this;

		function activateQuiz(){
			quizMetrics.changeState('quiz', true);
		}

		//GIVE ACCESS TO QUIZMETRICS IN LIST CONTROLLER & BIND TO VM
		vm.quizMetrics = quizMetrics;
		//
		vm.data = dataService.JSONQuizData;
		//
		vm.activateQuiz = activateQuiz;
	}

	angular
		.module('quizFramework')
		.controller('listCtrl', ListController);

	ListController.$inject = ['quizMetrics', 'dataService'];

})();
(function() {

	'use strict';

	function QuizController(quizMetrics, dataService) {
		// VM = Virtual model
		var vm = this,
				currentProgress = 1,
				numQuestionsAnswered = 0;

		//if the back button is clicked determine if we can go back and hide the button accordingly
		function backQuestion(index){

			vm.activeQuestion--;
			numQuestionsAnswered--;
			currentProgress--;

			vm.backProgress();

			dataService.JSONQuizData[vm.activeQuestion].selected = null;

			/*console.log('SELECTED' + dataService.JSONQuizData[vm.activeQuestion].selected);

			console.log('BACK - ACTIVE QUESTION' + vm.activeQuestion);

			console.log('BACK - NO QUESTIONS ANSWERED' + numQuestionsAnswered);*/

			if(vm.activeQuestion < 1){
				vm.back = false;
			}

		}

		//Set the selected answer to the index of the question
		function selectAnswerClass(index){
			dataService.JSONQuizData[vm.activeQuestion].selected = index;

			console.log(index);

			console.log(dataService.JSONQuizData[vm.activeQuestion].selected);
		}

		//if this function is running then not all questions have been answered so go to the next unanswered question
		function setActiveQuestion(index){
			if(index === undefined){
				//Take one off the length to match number of questions, array starts at 0
				var quizLength = dataService.JSONQuizData.length - 1;

				/*console.log('FORWARD - SET ACTIVE QUESTION' + vm.activeQuestion);*/

				vm.activeQuestion = vm.activeQuestion < quizLength?++vm.activeQuestion:0;
			} else {
				vm.activeQuestion = index;
			}

		}


		function questionAnswered(index){

			var quizLength = dataService.JSONQuizData.length;

			dataService.JSONQuizData[vm.activeQuestion].selected = index;

			vm.back = true;

			/*console.log('FORWARD - NO QUESTIONS ANSWERED' + numQuestionsAnswered);*/

			//If the current question has been answered increment the number of total questions
			if(dataService.JSONQuizData[vm.activeQuestion].selected !== null){
				numQuestionsAnswered++;


				if(numQuestionsAnswered >= quizLength){
					//finish quiz
					for(var i = 0; i < quizLength; i++){
						if(dataService.JSONQuizData[i].selected === null){
							setActiveQuestion(i);
							return;
						}
					}
					finaliseAnswers();
					return;
				}

			}
			vm.setActiveQuestion();
			currentProgress++;
			vm.forwardProgress();

		}

		//Update the progress bar class
		function backProgress(){

			//console.log('BACK UPDATING PROGRESS');
			
			var progressBarPosition = document.querySelectorAll('.progressBtn'),
					findClassname = 'btn-progress';

			//console.log('BACK Current progress: ' + currentProgress);
			//console.log('BACK Current QUESTION: ' + vm.activeQuestion);

			[].forEach.call(progressBarPosition, function(findClassname) {
				findClassname.className = findClassname.className.replace(' btn-progress','');
			});

		}

		//Update the progress bar class
		function forwardProgress(){

			//console.log('FORWARD UPDATING PROGRESS');

			var progressBarPosition = document.querySelectorAll('.progressBtn'),
					quizLength = dataService.JSONQuizData.length;

			//console.log('FORWARD Current progress: ' + currentProgress);
			//console.log('FORWARD Current QUESTION: ' + vm.activeQuestion);

			for(var i = 0; i < quizLength; i++){
				if(currentProgress >= vm.activeQuestion){
					
					for(var j = 0; j < currentProgress; j++){

						//console.log(j);

						if(!progressBarPosition[j].className.match('btn-progress')) { 

							//progressBarPosition[j].style.backgroundColor = "green";

							progressBarPosition[j].className += ' btn-progress';
						}

					}

				}
			}

		}

		function resetProgressBar(){
			var progressBarPosition = document.querySelectorAll('.progressBtn'),
					findClassname = 'btn-progress';

			[].forEach.call(progressBarPosition, function(findClassname) {
				findClassname.className = findClassname.className.replace(' btn-progress','');
			});
		}

		function resetScrollBarPosition(){
			$('.diagnostic-quiz .inner-container').mCustomScrollbar('scrollTo','top');
		}


		//Reset everything
		function finaliseAnswers(){
			vm.back = false;
			currentProgress = 1;
			vm.resetProgressBar();
			numQuestionsAnswered = 0;
			vm.activeQuestion = 0;
			quizMetrics.reviewQuiz();
			quizMetrics.changeState('quiz', false);
			//trigger the results page
			quizMetrics.changeState('results', true);
		}

		//GIVE ACCESS TO QUIZMETRICS IN QUIZ CONTROLLER & BIND TO VM
		vm.quizMetrics = quizMetrics;
		//Get access to dataService object in our view
		vm.dataService = dataService;
		//Named function syntax
		vm.questionAnswered = questionAnswered;
		//Set the active question
		vm.setActiveQuestion = setActiveQuestion;
		//Set the answer class on the submit button
		vm.selectAnswerClass = selectAnswerClass;
		//Go back a question
		vm.backQuestion = backQuestion;
		//Finalise answers
		vm.finaliseAnswers = finaliseAnswers;
		//Set the starting question
		vm.activeQuestion = 0;
		//Back link after first question answered
		vm.back = false;
		//Update the progress when clicking back
		vm.backProgress = backProgress;
		//Update the progress when going forward
		vm.forwardProgress = forwardProgress;
		//Reset the progress bar
		vm.resetProgressBar = resetProgressBar;
		//Reset the scrollbar position
		vm.resetScrollBarPosition = resetScrollBarPosition;
	}

	angular
		.module('quizFramework')
		.controller('quizCtrl', QuizController)
		.filter('character',function(){
	    return function(input){
	        return String.fromCharCode(64 + parseInt(input,10));
	    };
		});

	QuizController.$inject = ['quizMetrics', 'dataService'];

})();
(function() {

	'use strict';

	function ResultsController(quizMetrics, dataService) {

		// VM = Virtual model
		var vm = this;

		//calculate the number of each question answered to determine final output
		function calculateDiagnosticScore(){
			//Loop through all questions in JSON and match score to diagnostic score
			var score = quizMetrics.answerArray;
			var numberOfQuestions = [];
			var matches = [];

			for (var i = 0; i < dataService.JSONDiagnosticResult.length; i++) {
				var matchedScore = dataService.JSONDiagnosticResult[i].score;
				numberOfQuestions.push(matchedScore);

				//console.log(score);

				//console.log(numberOfQuestions);

				for(var j = 0; j < score.length; j++){
	        
	        //If more than one score in the array then we have a tied score
					if(score.length >= 2){
						//console.log('MORE THAN 1');

						//Show the last item in the JSON file
						/*i = dataService.JSONDiagnosticResult.length -1;

						return dataService.JSONDiagnosticResult[i].title,
									 dataService.JSONDiagnosticResult[i].image,
									 dataService.JSONDiagnosticResult[i].description;*/

						var a = 0;
						var	b = 1;
						var	c = 2;
						var	d = 3;

						//SCORE IS TIED AT A & B
						if (score.indexOf(a)+1 && score.indexOf(b)+1) {
        			//console.log('A & B');
        			i = a;
    				}

    				//SCORE IS TIED AT A & C
    				if (score.indexOf(a)+1 && score.indexOf(c)+1) {
        			//console.log('A & C');
        			i = c;
    				}

    				//SCORE IS TIED AT A & D
    				if (score.indexOf(a)+1 && score.indexOf(d)+1) {
        			//console.log('A & D');
        			i = a;
    				}

    				//SCORE IS TIED AT B & C
    				if (score.indexOf(b)+1 && score.indexOf(c)+1) {
        			//console.log('B & C');
        			i = c;
    				}

    				//SCORE IS TIED AT B & D
    				if (score.indexOf(b)+1 && score.indexOf(d)+1) {
        			//console.log('B & D');
        			i = b;
    				}

    				//SCORE IS TIED AT C & D
    				if (score.indexOf(c)+1 && score.indexOf(d)+1) {
        			//console.log('C & D');
        			i = c;
    				}

    				//SCORE IS TIED AT A, B & C
    				if (score.indexOf(a)+1 && score.indexOf(b)+1 && score.indexOf(c)+1) {
        			//console.log('A, B & C');
        			i = a;
    				}

    				//SCORE IS TIED AT A, B & D
    				if (score.indexOf(a)+1 && score.indexOf(b)+1 && score.indexOf(d)+1) {
        			//console.log('A, B & D');
        			i = a;
    				}

    				//SCORE IS TIED AT A, C & D
    				if (score.indexOf(a)+1 && score.indexOf(c)+1 && score.indexOf(d)+1) {
        			//console.log('A, C & D');
        			i = a;
    				}

    				//SCORE IS TIED AT B, C & D
    				if (score.indexOf(b)+1 && score.indexOf(c)+1 && score.indexOf(d)+1) {
        			//console.log('B, C & D');
        			i = c;
    				}

    				return dataService.JSONDiagnosticResult[i].title,
									 dataService.JSONDiagnosticResult[i].image,
									 dataService.JSONDiagnosticResult[i].description;

					}

					//Else determine which final result to display
	        else if(numberOfQuestions[i] === score[j]){
	            matches.push(numberOfQuestions[i]);

	            //console.log(score);

	            return dataService.JSONDiagnosticResult[i].title,
										 dataService.JSONDiagnosticResult[i].image,
										 dataService.JSONDiagnosticResult[i].description;
	        }
	    	}

			}
		}

		//Show question of clicked legend link
		function setActiveQuestion(index){
			vm.activeQuestion = index;
		}

		function reset(){
			quizMetrics.changeState('results', false); 
			//Reset the number of question corrects as we are startin again.
			quizMetrics.numCorrect = 0;
			quizMetrics.answerCount = null;
			quizMetrics.answerArray = [];
			quizMetrics.answermax = null,
			quizMetrics.answerResult = {},
			quizMetrics.duplicateResults = [];

			//Loop through all questions in JSON and reset all flags back to default
			for(var i = 0; i < dataService.JSONQuizData.length; i++){
				var data = dataService.JSONQuizData[i];

				data.selected = null;
				data.correct = null;
			}
		}

		vm.quizMetrics = quizMetrics;
		vm.dataService = dataService;
		vm.reset = reset;
		vm.setActiveQuestion = setActiveQuestion;
		vm.calculateDiagnosticScore = calculateDiagnosticScore;
		vm.activeQuestion = 0;

	}

	angular
		.module('quizFramework')
		.controller('resultsCtrl', ResultsController);

	ResultsController.$inject = ['quizMetrics', 'dataService'];

})();
(function() {

	'use strict';

	function DataFactory($http) {

		/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/
		/*var urlBase = 'HTMLResources/json/quiz-data.json?callback=JSON_CALLBACK';*/ 
		var urlBase = document.getElementById('jsonURL').title;

		console.log(urlBase);

		var JSONQuizData = [];
		var JSONDiagnosticResult = [];

		var dataObj = {
			JSONQuizData: JSONQuizData,
			JSONDiagnosticResult: JSONDiagnosticResult
		};

    $http.get(urlBase).success(function(data) {
        dataObj.JSONQuizData = data.JSONQuizData,
        dataObj.JSONDiagnosticResult = data.JSONDiagnosticResult;
    });

  	return dataObj;
	}

	angular
		.module('quizFramework')
		.factory('dataService', DataFactory);

	DataFactory.$inject = ['$http'];
		
})();
(function() {

	'use strict';

	function QuizMetrics(dataService) {

		function changeState(metric, state){
			if(metric === 'quiz'){
				quizObj.quizActive = state;
			} else if(metric === 'results') {
				quizObj.resultsActive = state;
			} else {
				return false;
			}		
		}

		//Count duplicate values and push into empty array
	  function finaliseResult(){

	  	quizObj.answerArray = [];

			for (var key in quizObj.duplicateResults) {
			    if (quizObj.duplicateResults.hasOwnProperty(key)) {
			      quizObj.answerArray.push(parseInt(quizObj.duplicateResults[key]));
			    }
			}

			//console.log(quizObj.answerArray);
	  }

		//Count each answer type
		function countAnswers() {

			for(var i = 0; i < quizObj.answerArray.length; ++i) {
			    if(!quizObj.answerResult[quizObj.answerArray[i]]) {
			    	quizObj.answerResult[quizObj.answerArray[i]] = 0;
			    }
			    ++quizObj.answerResult[quizObj.answerArray[i]];
			}

			//Find the highest value in the results array
			quizObj.answermax = Math.max.apply(null,Object.keys(quizObj.answerResult).map(function(x){ return quizObj.answerResult[x]; }));
			
			//Filter duplicate results
			quizObj.duplicateResults = Object.keys(quizObj.answerResult).filter(function(x){ return quizObj.answerResult[x] == quizObj.answermax; });

			//console.log(quizObj.answerResult);
			//console.log(quizObj.duplicateResults);
			//console.log(quizObj.answermax);

			finaliseResult();

	  }

		//Collate the answers
		function reviewQuiz(){
			for(var i = 0; i < dataService.JSONQuizData.length; i++){
	    	quizObj.answerArray.push(dataService.JSONQuizData[i].selected);

	    	//console.log(quizObj.answerArray);
		  }

		  countAnswers();
		}


		var quizObj = {
			quizActive: false,
			resultsActive: false,
			changeState: changeState,
			answerArray: [],
			reviewQuiz: reviewQuiz,
			numCorrect: 0,
			answermax: null,
			answerResult: {},
			duplicateResults: []
		};

		return quizObj;

	}

	angular
		.module('quizFramework')
		.factory('quizMetrics', QuizMetrics);

	QuizMetrics.$inject = ['dataService'];
		
})();
//# sourceMappingURL=framework.min.js.map
