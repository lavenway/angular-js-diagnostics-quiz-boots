{"version":3,"sources":["base.js","quiz-app.js","controllers/list.js","controllers/quiz.js","controllers/results.js","factories/dataservice.js","factories/quizMetrics.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"framework.min.js","sourcesContent":["(function($) {\n    'use strict';\n    $ = $ || jQuery;\n  \n    $(function() {\n        //Put your code here\n        /*var body = $('body'),\n            html = $('html'),\n            $doc = $(document);*/\n\n            /*handlexxxxxxxxxx = function () {\n              \n            };*/\n\n\n        //$navCloseDropdown.on('click', handlexxxxxxxxxx);\n\n        // Only run this stuff if page is fully loaded\n        // This is needed to prevent onreadystatechange being run twice\n        var ready = false;\n\n        document.onreadystatechange = function() {\n\n          if (ready) {\n            return;\n          }\n          \n          //Put your code here\n\n        };\n    });\n})(jQuery);","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('quizFramework', ['ngSanitize']);\n\n})();","(function() {\n\n\t'use strict';\n\t\n\tfunction ListController(quizMetrics, dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this;\n\n\t\tfunction activateQuiz(){\n\t\t\tquizMetrics.changeState('quiz', true);\n\t\t}\n\n\t\t//GIVE ACCESS TO QUIZMETRICS IN LIST CONTROLLER & BIND TO VM\n\t\tvm.quizMetrics = quizMetrics;\n\t\t//\n\t\tvm.data = dataService.JSONQuizData;\n\t\t//\n\t\tvm.activateQuiz = activateQuiz;\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('listCtrl', ListController);\n\n\tListController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction QuizController(quizMetrics, dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this,\n\t\t\t\tcurrentProgress = 1,\n\t\t\t\tnumQuestionsAnswered = 0;\n\n\t\t//if the back button is clicked determine if we can go back and hide the button accordingly\n\t\tfunction backQuestion(index){\n\n\t\t\tvm.activeQuestion--;\n\t\t\tnumQuestionsAnswered--;\n\t\t\tcurrentProgress--;\n\n\t\t\tvm.backProgress();\n\n\t\t\tdataService.JSONQuizData[vm.activeQuestion].selected = null;\n\n\t\t\t/*console.log('SELECTED' + dataService.JSONQuizData[vm.activeQuestion].selected);\n\n\t\t\tconsole.log('BACK - ACTIVE QUESTION' + vm.activeQuestion);\n\n\t\t\tconsole.log('BACK - NO QUESTIONS ANSWERED' + numQuestionsAnswered);*/\n\n\t\t\tif(vm.activeQuestion < 1){\n\t\t\t\tvm.back = false;\n\t\t\t}\n\n\t\t}\n\n\t\t//Set the selected answer to the index of the question\n\t\tfunction selectAnswerClass(index){\n\t\t\tdataService.JSONQuizData[vm.activeQuestion].selected = index;\n\n\t\t\tconsole.log(index);\n\n\t\t\tconsole.log(dataService.JSONQuizData[vm.activeQuestion].selected);\n\t\t}\n\n\t\t//if this function is running then not all questions have been answered so go to the next unanswered question\n\t\tfunction setActiveQuestion(index){\n\t\t\tif(index === undefined){\n\t\t\t\t//Take one off the length to match number of questions, array starts at 0\n\t\t\t\tvar quizLength = dataService.JSONQuizData.length - 1;\n\n\t\t\t\t/*console.log('FORWARD - SET ACTIVE QUESTION' + vm.activeQuestion);*/\n\n\t\t\t\tvm.activeQuestion = vm.activeQuestion < quizLength?++vm.activeQuestion:0;\n\t\t\t} else {\n\t\t\t\tvm.activeQuestion = index;\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction questionAnswered(index){\n\n\t\t\tvar quizLength = dataService.JSONQuizData.length;\n\n\t\t\tdataService.JSONQuizData[vm.activeQuestion].selected = index;\n\n\t\t\tvm.back = true;\n\n\t\t\t/*console.log('FORWARD - NO QUESTIONS ANSWERED' + numQuestionsAnswered);*/\n\n\t\t\t//If the current question has been answered increment the number of total questions\n\t\t\tif(dataService.JSONQuizData[vm.activeQuestion].selected !== null){\n\t\t\t\tnumQuestionsAnswered++;\n\n\n\t\t\t\tif(numQuestionsAnswered >= quizLength){\n\t\t\t\t\t//finish quiz\n\t\t\t\t\tfor(var i = 0; i < quizLength; i++){\n\t\t\t\t\t\tif(dataService.JSONQuizData[i].selected === null){\n\t\t\t\t\t\t\tsetActiveQuestion(i);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinaliseAnswers();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tvm.setActiveQuestion();\n\t\t\tcurrentProgress++;\n\t\t\tvm.forwardProgress();\n\n\t\t}\n\n\t\t//Update the progress bar class\n\t\tfunction backProgress(){\n\n\t\t\t//console.log('BACK UPDATING PROGRESS');\n\t\t\t\n\t\t\tvar progressBarPosition = document.querySelectorAll('.progressBtn'),\n\t\t\t\t\tfindClassname = 'btn-progress';\n\n\t\t\t//console.log('BACK Current progress: ' + currentProgress);\n\t\t\t//console.log('BACK Current QUESTION: ' + vm.activeQuestion);\n\n\t\t\t[].forEach.call(progressBarPosition, function(findClassname) {\n\t\t\t\tfindClassname.className = findClassname.className.replace(' btn-progress','');\n\t\t\t});\n\n\t\t}\n\n\t\t//Update the progress bar class\n\t\tfunction forwardProgress(){\n\n\t\t\t//console.log('FORWARD UPDATING PROGRESS');\n\n\t\t\tvar progressBarPosition = document.querySelectorAll('.progressBtn'),\n\t\t\t\t\tquizLength = dataService.JSONQuizData.length;\n\n\t\t\t//console.log('FORWARD Current progress: ' + currentProgress);\n\t\t\t//console.log('FORWARD Current QUESTION: ' + vm.activeQuestion);\n\n\t\t\tfor(var i = 0; i < quizLength; i++){\n\t\t\t\tif(currentProgress >= vm.activeQuestion){\n\t\t\t\t\t\n\t\t\t\t\tfor(var j = 0; j < currentProgress; j++){\n\n\t\t\t\t\t\t//console.log(j);\n\n\t\t\t\t\t\tif(!progressBarPosition[j].className.match('btn-progress')) { \n\n\t\t\t\t\t\t\t//progressBarPosition[j].style.backgroundColor = \"green\";\n\n\t\t\t\t\t\t\tprogressBarPosition[j].className += ' btn-progress';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tfunction resetProgressBar(){\n\t\t\tvar progressBarPosition = document.querySelectorAll('.progressBtn'),\n\t\t\t\t\tfindClassname = 'btn-progress';\n\n\t\t\t[].forEach.call(progressBarPosition, function(findClassname) {\n\t\t\t\tfindClassname.className = findClassname.className.replace(' btn-progress','');\n\t\t\t});\n\t\t}\n\n\t\tfunction resetScrollBarPosition(){\n\t\t\t$('.diagnostic-quiz .inner-container').mCustomScrollbar('scrollTo','top');\n\t\t}\n\n\n\t\t//Reset everything\n\t\tfunction finaliseAnswers(){\n\t\t\tvm.back = false;\n\t\t\tcurrentProgress = 1;\n\t\t\tvm.resetProgressBar();\n\t\t\tnumQuestionsAnswered = 0;\n\t\t\tvm.activeQuestion = 0;\n\t\t\tquizMetrics.reviewQuiz();\n\t\t\tquizMetrics.changeState('quiz', false);\n\t\t\t//trigger the results page\n\t\t\tquizMetrics.changeState('results', true);\n\t\t}\n\n\t\t//GIVE ACCESS TO QUIZMETRICS IN QUIZ CONTROLLER & BIND TO VM\n\t\tvm.quizMetrics = quizMetrics;\n\t\t//Get access to dataService object in our view\n\t\tvm.dataService = dataService;\n\t\t//Named function syntax\n\t\tvm.questionAnswered = questionAnswered;\n\t\t//Set the active question\n\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\t//Set the answer class on the submit button\n\t\tvm.selectAnswerClass = selectAnswerClass;\n\t\t//Go back a question\n\t\tvm.backQuestion = backQuestion;\n\t\t//Finalise answers\n\t\tvm.finaliseAnswers = finaliseAnswers;\n\t\t//Set the starting question\n\t\tvm.activeQuestion = 0;\n\t\t//Back link after first question answered\n\t\tvm.back = false;\n\t\t//Update the progress when clicking back\n\t\tvm.backProgress = backProgress;\n\t\t//Update the progress when going forward\n\t\tvm.forwardProgress = forwardProgress;\n\t\t//Reset the progress bar\n\t\tvm.resetProgressBar = resetProgressBar;\n\t\t//Reset the scrollbar position\n\t\tvm.resetScrollBarPosition = resetScrollBarPosition;\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('quizCtrl', QuizController)\n\t\t.filter('character',function(){\n\t    return function(input){\n\t        return String.fromCharCode(64 + parseInt(input,10));\n\t    };\n\t\t});\n\n\tQuizController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction ResultsController(quizMetrics, dataService) {\n\n\t\t// VM = Virtual model\n\t\tvar vm = this;\n\n\t\t//calculate the number of each question answered to determine final output\n\t\tfunction calculateDiagnosticScore(){\n\t\t\t//Loop through all questions in JSON and match score to diagnostic score\n\t\t\tvar score = quizMetrics.answerArray;\n\t\t\tvar numberOfQuestions = [];\n\t\t\tvar matches = [];\n\n\t\t\tfor (var i = 0; i < dataService.JSONDiagnosticResult.length; i++) {\n\t\t\t\tvar matchedScore = dataService.JSONDiagnosticResult[i].score;\n\t\t\t\tnumberOfQuestions.push(matchedScore);\n\n\t\t\t\t//console.log(score);\n\n\t\t\t\t//console.log(numberOfQuestions);\n\n\t\t\t\tfor(var j = 0; j < score.length; j++){\n\t        \n\t        //If more than one score in the array then we have a tied score\n\t\t\t\t\tif(score.length >= 2){\n\t\t\t\t\t\t//console.log('MORE THAN 1');\n\n\t\t\t\t\t\t//Show the last item in the JSON file\n\t\t\t\t\t\t/*i = dataService.JSONDiagnosticResult.length -1;\n\n\t\t\t\t\t\treturn dataService.JSONDiagnosticResult[i].title,\n\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].image,\n\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].description;*/\n\n\t\t\t\t\t\tvar a = 0;\n\t\t\t\t\t\tvar\tb = 1;\n\t\t\t\t\t\tvar\tc = 2;\n\t\t\t\t\t\tvar\td = 3;\n\n\t\t\t\t\t\t//SCORE IS TIED AT A & B\n\t\t\t\t\t\tif (score.indexOf(a)+1 && score.indexOf(b)+1) {\n        \t\t\t//console.log('A & B');\n        \t\t\ti = a;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT A & C\n    \t\t\t\tif (score.indexOf(a)+1 && score.indexOf(c)+1) {\n        \t\t\t//console.log('A & C');\n        \t\t\ti = c;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT A & D\n    \t\t\t\tif (score.indexOf(a)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('A & D');\n        \t\t\ti = a;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT B & C\n    \t\t\t\tif (score.indexOf(b)+1 && score.indexOf(c)+1) {\n        \t\t\t//console.log('B & C');\n        \t\t\ti = c;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT B & D\n    \t\t\t\tif (score.indexOf(b)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('B & D');\n        \t\t\ti = b;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT C & D\n    \t\t\t\tif (score.indexOf(c)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('C & D');\n        \t\t\ti = c;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT A, B & C\n    \t\t\t\tif (score.indexOf(a)+1 && score.indexOf(b)+1 && score.indexOf(c)+1) {\n        \t\t\t//console.log('A, B & C');\n        \t\t\ti = a;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT A, B & D\n    \t\t\t\tif (score.indexOf(a)+1 && score.indexOf(b)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('A, B & D');\n        \t\t\ti = a;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT A, C & D\n    \t\t\t\tif (score.indexOf(a)+1 && score.indexOf(c)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('A, C & D');\n        \t\t\ti = a;\n    \t\t\t\t}\n\n    \t\t\t\t//SCORE IS TIED AT B, C & D\n    \t\t\t\tif (score.indexOf(b)+1 && score.indexOf(c)+1 && score.indexOf(d)+1) {\n        \t\t\t//console.log('B, C & D');\n        \t\t\ti = c;\n    \t\t\t\t}\n\n    \t\t\t\treturn dataService.JSONDiagnosticResult[i].title,\n\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].image,\n\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].description;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//Else determine which final result to display\n\t        else if(numberOfQuestions[i] === score[j]){\n\t            matches.push(numberOfQuestions[i]);\n\n\t            //console.log(score);\n\n\t            return dataService.JSONDiagnosticResult[i].title,\n\t\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].image,\n\t\t\t\t\t\t\t\t\t\t dataService.JSONDiagnosticResult[i].description;\n\t        }\n\t    \t}\n\n\t\t\t}\n\t\t}\n\n\t\t//Show question of clicked legend link\n\t\tfunction setActiveQuestion(index){\n\t\t\tvm.activeQuestion = index;\n\t\t}\n\n\t\tfunction reset(){\n\t\t\tquizMetrics.changeState('results', false); \n\t\t\t//Reset the number of question corrects as we are startin again.\n\t\t\tquizMetrics.numCorrect = 0;\n\t\t\tquizMetrics.answerCount = null;\n\t\t\tquizMetrics.answerArray = [];\n\t\t\tquizMetrics.answermax = null,\n\t\t\tquizMetrics.answerResult = {},\n\t\t\tquizMetrics.duplicateResults = [];\n\n\t\t\t//Loop through all questions in JSON and reset all flags back to default\n\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t\t\t\tvar data = dataService.JSONQuizData[i];\n\n\t\t\t\tdata.selected = null;\n\t\t\t\tdata.correct = null;\n\t\t\t}\n\t\t}\n\n\t\tvm.quizMetrics = quizMetrics;\n\t\tvm.dataService = dataService;\n\t\tvm.reset = reset;\n\t\tvm.setActiveQuestion = setActiveQuestion;\n\t\tvm.calculateDiagnosticScore = calculateDiagnosticScore;\n\t\tvm.activeQuestion = 0;\n\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.controller('resultsCtrl', ResultsController);\n\n\tResultsController.$inject = ['quizMetrics', 'dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction DataFactory($http) {\n\n\t\t/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/\n\t\t/*var urlBase = 'HTMLResources/json/quiz-data.json?callback=JSON_CALLBACK';*/ \n\t\tvar urlBase = document.getElementById('jsonURL').title;\n\n\t\tconsole.log(urlBase);\n\n\t\tvar JSONQuizData = [];\n\t\tvar JSONDiagnosticResult = [];\n\n\t\tvar dataObj = {\n\t\t\tJSONQuizData: JSONQuizData,\n\t\t\tJSONDiagnosticResult: JSONDiagnosticResult\n\t\t};\n\n    $http.get(urlBase).success(function(data) {\n        dataObj.JSONQuizData = data.JSONQuizData,\n        dataObj.JSONDiagnosticResult = data.JSONDiagnosticResult;\n    });\n\n  \treturn dataObj;\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('dataService', DataFactory);\n\n\tDataFactory.$inject = ['$http'];\n\t\t\n})();","(function() {\n\n\t'use strict';\n\n\tfunction QuizMetrics(dataService) {\n\n\t\tfunction changeState(metric, state){\n\t\t\tif(metric === 'quiz'){\n\t\t\t\tquizObj.quizActive = state;\n\t\t\t} else if(metric === 'results') {\n\t\t\t\tquizObj.resultsActive = state;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\t\t\n\t\t}\n\n\t\t//Count duplicate values and push into empty array\n\t  function finaliseResult(){\n\n\t  \tquizObj.answerArray = [];\n\n\t\t\tfor (var key in quizObj.duplicateResults) {\n\t\t\t    if (quizObj.duplicateResults.hasOwnProperty(key)) {\n\t\t\t      quizObj.answerArray.push(parseInt(quizObj.duplicateResults[key]));\n\t\t\t    }\n\t\t\t}\n\n\t\t\t//console.log(quizObj.answerArray);\n\t  }\n\n\t\t//Count each answer type\n\t\tfunction countAnswers() {\n\n\t\t\tfor(var i = 0; i < quizObj.answerArray.length; ++i) {\n\t\t\t    if(!quizObj.answerResult[quizObj.answerArray[i]]) {\n\t\t\t    \tquizObj.answerResult[quizObj.answerArray[i]] = 0;\n\t\t\t    }\n\t\t\t    ++quizObj.answerResult[quizObj.answerArray[i]];\n\t\t\t}\n\n\t\t\t//Find the highest value in the results array\n\t\t\tquizObj.answermax = Math.max.apply(null,Object.keys(quizObj.answerResult).map(function(x){ return quizObj.answerResult[x]; }));\n\t\t\t\n\t\t\t//Filter duplicate results\n\t\t\tquizObj.duplicateResults = Object.keys(quizObj.answerResult).filter(function(x){ return quizObj.answerResult[x] == quizObj.answermax; });\n\n\t\t\t//console.log(quizObj.answerResult);\n\t\t\t//console.log(quizObj.duplicateResults);\n\t\t\t//console.log(quizObj.answermax);\n\n\t\t\tfinaliseResult();\n\n\t  }\n\n\t\t//Collate the answers\n\t\tfunction reviewQuiz(){\n\t\t\tfor(var i = 0; i < dataService.JSONQuizData.length; i++){\n\t    \tquizObj.answerArray.push(dataService.JSONQuizData[i].selected);\n\n\t    \t//console.log(quizObj.answerArray);\n\t\t  }\n\n\t\t  countAnswers();\n\t\t}\n\n\n\t\tvar quizObj = {\n\t\t\tquizActive: false,\n\t\t\tresultsActive: false,\n\t\t\tchangeState: changeState,\n\t\t\tanswerArray: [],\n\t\t\treviewQuiz: reviewQuiz,\n\t\t\tnumCorrect: 0,\n\t\t\tanswermax: null,\n\t\t\tanswerResult: {},\n\t\t\tduplicateResults: []\n\t\t};\n\n\t\treturn quizObj;\n\n\t}\n\n\tangular\n\t\t.module('quizFramework')\n\t\t.factory('quizMetrics', QuizMetrics);\n\n\tQuizMetrics.$inject = ['dataService'];\n\t\t\n})();"],"sourceRoot":"/source/"}